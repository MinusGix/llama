/* automatically generated by rust-bindgen */

pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
pub type size_t = ::std::os::raw::c_ulong;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_config_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_engine_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_compartment_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_store_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_valtype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_functype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_tabletype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_memorytype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_globaltype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_externtype_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_ref_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_trap_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_foreign_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_module_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_func_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_table_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_memory_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_global_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_extern_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_instance_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_module_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_func_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_table_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_memory_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_shared_foreign_t {
    _unused: [u8; 0],
}
#[doc = ""]
pub type wasm_float32_t = f32;
pub type wasm_float64_t = f64;
extern "C" {
    pub fn wasm_config_delete(arg1: *mut wasm_config_t);
}
extern "C" {
    #[doc = ""]
    pub fn wasm_config_new() -> *mut wasm_config_t;
}
extern "C" {
    pub fn wasm_config_feature_set_import_export_mutable_globals(
        config: *mut wasm_config_t,
        enable: bool,
    );
}
extern "C" {
    pub fn wasm_config_feature_set_nontrapping_float_to_int(
        config: *mut wasm_config_t,
        enable: bool,
    );
}
extern "C" {
    pub fn wasm_config_feature_set_sign_extension(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_bulk_memory_ops(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_simd(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_atomics(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_exception_handling(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_multivalue(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_reference_types(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_extended_name_section(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_multimemory(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_shared_tables(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_allow_legacy_inst_names(
        config: *mut wasm_config_t,
        enable: bool,
    );
}
extern "C" {
    pub fn wasm_config_feature_set_any_extern_kind_elems(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_wat_quoted_names(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_config_feature_set_wat_custom_sections(config: *mut wasm_config_t, enable: bool);
}
extern "C" {
    pub fn wasm_engine_delete(arg1: *mut wasm_engine_t);
}
extern "C" {
    pub fn wasm_engine_new() -> *mut wasm_engine_t;
}
extern "C" {
    pub fn wasm_engine_new_with_config(arg1: *mut wasm_config_t) -> *mut wasm_engine_t;
}
extern "C" {
    pub fn wasm_compartment_delete(arg1: *mut wasm_compartment_t);
}
extern "C" {
    pub fn wasm_compartment_new(
        engine: *mut wasm_engine_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_compartment_t;
}
extern "C" {
    pub fn wasm_compartment_clone(arg1: *const wasm_compartment_t) -> *mut wasm_compartment_t;
}
extern "C" {
    pub fn wasm_compartment_contains(
        arg1: *const wasm_compartment_t,
        arg2: *const wasm_ref_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_store_delete(arg1: *mut wasm_store_t);
}
extern "C" {
    pub fn wasm_store_new(
        arg1: *mut wasm_compartment_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_store_t;
}
#[doc = ""]
pub type wasm_mutability_t = u8;
pub const wasm_mutability_enum_WASM_CONST: wasm_mutability_enum = 0;
pub const wasm_mutability_enum_WASM_VAR: wasm_mutability_enum = 1;
pub type wasm_mutability_enum = u32;
pub type wasm_shared_t = u8;
pub const wasm_shared_enum_WASM_NOTSHARED: wasm_shared_enum = 0;
pub const wasm_shared_enum_WASM_SHARED: wasm_shared_enum = 1;
pub type wasm_shared_enum = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_limits_t {
    pub min: u32,
    pub max: u32,
}
#[test]
fn bindgen_test_layout_wasm_limits_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_limits_t>(),
        8usize,
        concat!("Size of: ", stringify!(wasm_limits_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_limits_t>(),
        4usize,
        concat!("Alignment of ", stringify!(wasm_limits_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_limits_t>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_limits_t),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_limits_t>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_limits_t),
            "::",
            stringify!(max)
        )
    );
}
pub const wasm_limits_max_default: u32 = 4294967295;
extern "C" {
    pub fn wasm_valtype_delete(arg1: *mut wasm_valtype_t);
}
extern "C" {
    pub fn wasm_valtype_copy(arg1: *mut wasm_valtype_t) -> *mut wasm_valtype_t;
}
pub type wasm_valkind_t = u8;
pub const wasm_valkind_enum_WASM_I32: wasm_valkind_enum = 0;
pub const wasm_valkind_enum_WASM_I64: wasm_valkind_enum = 1;
pub const wasm_valkind_enum_WASM_F32: wasm_valkind_enum = 2;
pub const wasm_valkind_enum_WASM_F64: wasm_valkind_enum = 3;
pub const wasm_valkind_enum_WASM_V128: wasm_valkind_enum = 4;
pub const wasm_valkind_enum_WASM_ANYREF: wasm_valkind_enum = 128;
pub const wasm_valkind_enum_WASM_FUNCREF: wasm_valkind_enum = 129;
pub type wasm_valkind_enum = u32;
extern "C" {
    pub fn wasm_valtype_new(arg1: wasm_valkind_t) -> *mut wasm_valtype_t;
}
extern "C" {
    pub fn wasm_valtype_kind(arg1: *const wasm_valtype_t) -> wasm_valkind_t;
}
extern "C" {
    pub fn wasm_functype_delete(arg1: *mut wasm_functype_t);
}
extern "C" {
    pub fn wasm_functype_copy(arg1: *mut wasm_functype_t) -> *mut wasm_functype_t;
}
extern "C" {
    pub fn wasm_functype_new(
        params: *mut *mut wasm_valtype_t,
        num_params: size_t,
        results: *mut *mut wasm_valtype_t,
        num_results: size_t,
    ) -> *mut wasm_functype_t;
}
extern "C" {
    pub fn wasm_functype_num_params(type_: *const wasm_functype_t) -> size_t;
}
extern "C" {
    pub fn wasm_functype_param(type_: *const wasm_functype_t, index: size_t)
        -> *mut wasm_valtype_t;
}
extern "C" {
    pub fn wasm_functype_num_results(type_: *const wasm_functype_t) -> size_t;
}
extern "C" {
    pub fn wasm_functype_result(
        type_: *const wasm_functype_t,
        index: size_t,
    ) -> *mut wasm_valtype_t;
}
extern "C" {
    pub fn wasm_globaltype_delete(arg1: *mut wasm_globaltype_t);
}
extern "C" {
    pub fn wasm_globaltype_copy(arg1: *mut wasm_globaltype_t) -> *mut wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_globaltype_new(
        arg1: *mut wasm_valtype_t,
        arg2: wasm_mutability_t,
    ) -> *mut wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_globaltype_content(arg1: *const wasm_globaltype_t) -> *const wasm_valtype_t;
}
extern "C" {
    pub fn wasm_globaltype_mutability(arg1: *const wasm_globaltype_t) -> wasm_mutability_t;
}
extern "C" {
    pub fn wasm_tabletype_delete(arg1: *mut wasm_tabletype_t);
}
extern "C" {
    pub fn wasm_tabletype_copy(arg1: *mut wasm_tabletype_t) -> *mut wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_tabletype_new(
        arg1: *mut wasm_valtype_t,
        arg2: *const wasm_limits_t,
        arg3: wasm_shared_t,
    ) -> *mut wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_tabletype_element(arg1: *const wasm_tabletype_t) -> *const wasm_valtype_t;
}
extern "C" {
    pub fn wasm_tabletype_limits(arg1: *const wasm_tabletype_t) -> *const wasm_limits_t;
}
extern "C" {
    pub fn wasm_tabletype_shared(arg1: *const wasm_tabletype_t) -> wasm_shared_t;
}
extern "C" {
    pub fn wasm_memorytype_delete(arg1: *mut wasm_memorytype_t);
}
extern "C" {
    pub fn wasm_memorytype_copy(arg1: *mut wasm_memorytype_t) -> *mut wasm_memorytype_t;
}
extern "C" {
    pub fn wasm_memorytype_new(
        arg1: *const wasm_limits_t,
        arg2: wasm_shared_t,
    ) -> *mut wasm_memorytype_t;
}
extern "C" {
    pub fn wasm_memorytype_limits(arg1: *const wasm_memorytype_t) -> *const wasm_limits_t;
}
extern "C" {
    pub fn wasm_memorytype_shared(arg1: *const wasm_memorytype_t) -> wasm_shared_t;
}
extern "C" {
    pub fn wasm_externtype_delete(arg1: *mut wasm_externtype_t);
}
extern "C" {
    pub fn wasm_externtype_copy(arg1: *mut wasm_externtype_t) -> *mut wasm_externtype_t;
}
pub type wasm_externkind_t = u8;
pub const wasm_externkind_enum_WASM_EXTERN_FUNC: wasm_externkind_enum = 0;
pub const wasm_externkind_enum_WASM_EXTERN_GLOBAL: wasm_externkind_enum = 1;
pub const wasm_externkind_enum_WASM_EXTERN_TABLE: wasm_externkind_enum = 2;
pub const wasm_externkind_enum_WASM_EXTERN_MEMORY: wasm_externkind_enum = 3;
pub type wasm_externkind_enum = u32;
extern "C" {
    pub fn wasm_externtype_kind(arg1: *const wasm_externtype_t) -> wasm_externkind_t;
}
extern "C" {
    pub fn wasm_functype_as_externtype(arg1: *mut wasm_functype_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_globaltype_as_externtype(arg1: *mut wasm_globaltype_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_tabletype_as_externtype(arg1: *mut wasm_tabletype_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_memorytype_as_externtype(arg1: *mut wasm_memorytype_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_externtype_as_functype(arg1: *mut wasm_externtype_t) -> *mut wasm_functype_t;
}
extern "C" {
    pub fn wasm_externtype_as_globaltype(arg1: *mut wasm_externtype_t) -> *mut wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_externtype_as_tabletype(arg1: *mut wasm_externtype_t) -> *mut wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_externtype_as_memorytype(arg1: *mut wasm_externtype_t) -> *mut wasm_memorytype_t;
}
extern "C" {
    pub fn wasm_functype_as_externtype_const(
        arg1: *const wasm_functype_t,
    ) -> *const wasm_externtype_t;
}
extern "C" {
    pub fn wasm_globaltype_as_externtype_const(
        arg1: *const wasm_globaltype_t,
    ) -> *const wasm_externtype_t;
}
extern "C" {
    pub fn wasm_tabletype_as_externtype_const(
        arg1: *const wasm_tabletype_t,
    ) -> *const wasm_externtype_t;
}
extern "C" {
    pub fn wasm_memorytype_as_externtype_const(
        arg1: *const wasm_memorytype_t,
    ) -> *const wasm_externtype_t;
}
extern "C" {
    pub fn wasm_externtype_as_functype_const(
        arg1: *const wasm_externtype_t,
    ) -> *const wasm_functype_t;
}
extern "C" {
    pub fn wasm_externtype_as_globaltype_const(
        arg1: *const wasm_externtype_t,
    ) -> *const wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_externtype_as_tabletype_const(
        arg1: *const wasm_externtype_t,
    ) -> *const wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_externtype_as_memorytype_const(
        arg1: *const wasm_externtype_t,
    ) -> *const wasm_memorytype_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_import_t {
    pub module: *const ::std::os::raw::c_char,
    pub num_module_bytes: size_t,
    pub name: *const ::std::os::raw::c_char,
    pub num_name_bytes: size_t,
    pub type_: *mut wasm_externtype_t,
}
#[test]
fn bindgen_test_layout_wasm_import_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_import_t>(),
        40usize,
        concat!("Size of: ", stringify!(wasm_import_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_import_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_import_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_import_t>())).module as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_import_t),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_import_t>())).num_module_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_import_t),
            "::",
            stringify!(num_module_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_import_t>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_import_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_import_t>())).num_name_bytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_import_t),
            "::",
            stringify!(num_name_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_import_t>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_import_t),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_export_t {
    pub name: *const ::std::os::raw::c_char,
    pub num_name_bytes: size_t,
    pub type_: *mut wasm_externtype_t,
}
#[test]
fn bindgen_test_layout_wasm_export_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_export_t>(),
        24usize,
        concat!("Size of: ", stringify!(wasm_export_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_export_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_export_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_export_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_export_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_export_t>())).num_name_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_export_t),
            "::",
            stringify!(num_name_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_export_t>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_export_t),
            "::",
            stringify!(type_)
        )
    );
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_v128_t {
    pub u64x2: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_wasm_v128_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_v128_t>(),
        16usize,
        concat!("Size of: ", stringify!(wasm_v128_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_v128_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_v128_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_v128_t>())).u64x2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_v128_t),
            "::",
            stringify!(u64x2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wasm_val_t {
    pub i32: i32,
    pub i64: i64,
    pub f32: wasm_float32_t,
    pub f64: wasm_float64_t,
    pub v128: wasm_v128_t,
    pub ref_: *mut wasm_ref_t,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_wasm_val_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_val_t>(),
        16usize,
        concat!("Size of: ", stringify!(wasm_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_val_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_val_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_val_t>())).i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_val_t),
            "::",
            stringify!(i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_val_t>())).i64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_val_t),
            "::",
            stringify!(i64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_val_t>())).f32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_val_t),
            "::",
            stringify!(f32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_val_t>())).f64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_val_t),
            "::",
            stringify!(f64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_val_t>())).v128 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_val_t),
            "::",
            stringify!(v128)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_val_t>())).ref_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_val_t),
            "::",
            stringify!(ref_)
        )
    );
}
extern "C" {
    pub fn wasm_val_delete(kind: wasm_valkind_t, v: *mut wasm_val_t);
}
extern "C" {
    pub fn wasm_val_copy(kind: wasm_valkind_t, out: *mut wasm_val_t, arg1: *const wasm_val_t);
}
extern "C" {
    pub fn wasm_ref_delete(arg1: *mut wasm_ref_t);
}
extern "C" {
    pub fn wasm_ref_copy(arg1: *const wasm_ref_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_same(arg1: *const wasm_ref_t, arg2: *const wasm_ref_t) -> bool;
}
extern "C" {
    pub fn wasm_ref_get_host_info(arg1: *const wasm_ref_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_ref_set_host_info(arg1: *mut wasm_ref_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_ref_set_host_info_with_finalizer(
        arg1: *mut wasm_ref_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_ref_remap_to_cloned_compartment(
        arg1: *const wasm_ref_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_name(arg1: *const wasm_ref_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wasm_frame_t {
    pub function: *mut wasm_func_t,
    pub instr_index: size_t,
}
#[test]
fn bindgen_test_layout_wasm_frame_t() {
    assert_eq!(
        ::std::mem::size_of::<wasm_frame_t>(),
        16usize,
        concat!("Size of: ", stringify!(wasm_frame_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wasm_frame_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wasm_frame_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_frame_t>())).function as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_frame_t),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wasm_frame_t>())).instr_index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wasm_frame_t),
            "::",
            stringify!(instr_index)
        )
    );
}
extern "C" {
    pub fn wasm_trap_delete(arg1: *mut wasm_trap_t);
}
extern "C" {
    pub fn wasm_trap_copy(arg1: *const wasm_trap_t) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_same(arg1: *const wasm_trap_t, arg2: *const wasm_trap_t) -> bool;
}
extern "C" {
    pub fn wasm_trap_get_host_info(arg1: *const wasm_trap_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_trap_set_host_info(arg1: *mut wasm_trap_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_trap_set_host_info_with_finalizer(
        arg1: *mut wasm_trap_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_trap_remap_to_cloned_compartment(
        arg1: *const wasm_trap_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_name(arg1: *const wasm_trap_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_trap_as_ref(arg1: *mut wasm_trap_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_trap(arg1: *mut wasm_ref_t) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_as_ref_const(arg1: *const wasm_trap_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_trap_const(arg1: *const wasm_ref_t) -> *const wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_new(
        arg1: *mut wasm_compartment_t,
        message: *const ::std::os::raw::c_char,
        num_message_bytes: size_t,
    ) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_trap_message(
        arg1: *const wasm_trap_t,
        out_message: *mut ::std::os::raw::c_char,
        inout_num_message_bytes: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_trap_stack_num_frames(arg1: *const wasm_trap_t) -> size_t;
}
extern "C" {
    pub fn wasm_trap_stack_frame(
        arg1: *const wasm_trap_t,
        index: size_t,
        out_frame: *mut wasm_frame_t,
    );
}
extern "C" {
    pub fn wasm_foreign_delete(arg1: *mut wasm_foreign_t);
}
extern "C" {
    pub fn wasm_foreign_copy(arg1: *const wasm_foreign_t) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_same(arg1: *const wasm_foreign_t, arg2: *const wasm_foreign_t) -> bool;
}
extern "C" {
    pub fn wasm_foreign_get_host_info(arg1: *const wasm_foreign_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_foreign_set_host_info(arg1: *mut wasm_foreign_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_foreign_set_host_info_with_finalizer(
        arg1: *mut wasm_foreign_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_foreign_remap_to_cloned_compartment(
        arg1: *const wasm_foreign_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_name(arg1: *const wasm_foreign_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_foreign_as_ref(arg1: *mut wasm_foreign_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_foreign(arg1: *mut wasm_ref_t) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_as_ref_const(arg1: *const wasm_foreign_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_foreign_const(arg1: *const wasm_ref_t) -> *const wasm_foreign_t;
}
extern "C" {
    pub fn wasm_shared_foreign_delete(arg1: *mut wasm_shared_foreign_t);
}
extern "C" {
    pub fn wasm_foreign_share(arg1: *const wasm_foreign_t) -> *mut wasm_shared_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_obtain(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_shared_foreign_t,
    ) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_foreign_new(
        arg1: *mut wasm_compartment_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_foreign_t;
}
extern "C" {
    pub fn wasm_module_delete(arg1: *mut wasm_module_t);
}
extern "C" {
    pub fn wasm_module_copy(arg1: *mut wasm_module_t) -> *mut wasm_module_t;
}
extern "C" {
    pub fn wasm_module_new(
        arg1: *mut wasm_engine_t,
        binary: *const ::std::os::raw::c_char,
        num_binary_bytes: size_t,
    ) -> *mut wasm_module_t;
}
extern "C" {
    pub fn wasm_module_new_text(
        arg1: *mut wasm_engine_t,
        text: *const ::std::os::raw::c_char,
        num_text_chars: size_t,
    ) -> *mut wasm_module_t;
}
extern "C" {
    pub fn wasm_module_print(
        module: *const wasm_module_t,
        out_num_chars: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_module_validate(
        binary: *const ::std::os::raw::c_char,
        num_binary_bytes: size_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_module_num_imports(module: *const wasm_module_t) -> size_t;
}
extern "C" {
    pub fn wasm_module_import(
        module: *const wasm_module_t,
        index: size_t,
        out_import: *mut wasm_import_t,
    );
}
extern "C" {
    pub fn wasm_module_num_exports(module: *const wasm_module_t) -> size_t;
}
extern "C" {
    pub fn wasm_module_export(
        module: *const wasm_module_t,
        index: size_t,
        out_export: *mut wasm_export_t,
    );
}
extern "C" {
    pub fn wasm_func_delete(arg1: *mut wasm_func_t);
}
extern "C" {
    pub fn wasm_func_copy(arg1: *const wasm_func_t) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_same(arg1: *const wasm_func_t, arg2: *const wasm_func_t) -> bool;
}
extern "C" {
    pub fn wasm_func_get_host_info(arg1: *const wasm_func_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_func_set_host_info(arg1: *mut wasm_func_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_func_set_host_info_with_finalizer(
        arg1: *mut wasm_func_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_func_remap_to_cloned_compartment(
        arg1: *const wasm_func_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_name(arg1: *const wasm_func_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_func_as_ref(arg1: *mut wasm_func_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_func(arg1: *mut wasm_ref_t) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_as_ref_const(arg1: *const wasm_func_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_func_const(arg1: *const wasm_ref_t) -> *const wasm_func_t;
}
extern "C" {
    pub fn wasm_shared_func_delete(arg1: *mut wasm_shared_func_t);
}
extern "C" {
    pub fn wasm_func_share(arg1: *const wasm_func_t) -> *mut wasm_shared_func_t;
}
extern "C" {
    pub fn wasm_func_obtain(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_shared_func_t,
    ) -> *mut wasm_func_t;
}
pub type wasm_func_callback_t = ::std::option::Option<
    unsafe extern "C" fn(args: *const wasm_val_t, results: *mut wasm_val_t) -> *mut wasm_trap_t,
>;
pub type wasm_func_callback_with_env_t = ::std::option::Option<
    unsafe extern "C" fn(
        env: *mut ::std::os::raw::c_void,
        args: *const wasm_val_t,
        results: *mut wasm_val_t,
    ) -> *mut wasm_trap_t,
>;
extern "C" {
    pub fn wasm_func_new(
        arg1: *mut wasm_compartment_t,
        arg2: *const wasm_functype_t,
        arg3: wasm_func_callback_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_new_with_env(
        arg1: *mut wasm_compartment_t,
        type_: *const wasm_functype_t,
        arg2: wasm_func_callback_with_env_t,
        env: *mut ::std::os::raw::c_void,
        finalizer: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_func_type(arg1: *const wasm_func_t) -> *mut wasm_functype_t;
}
extern "C" {
    pub fn wasm_func_param_arity(arg1: *const wasm_func_t) -> size_t;
}
extern "C" {
    pub fn wasm_func_result_arity(arg1: *const wasm_func_t) -> size_t;
}
extern "C" {
    pub fn wasm_func_call(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_func_t,
        args: *const wasm_val_t,
        results: *mut wasm_val_t,
    ) -> *mut wasm_trap_t;
}
extern "C" {
    pub fn wasm_global_delete(arg1: *mut wasm_global_t);
}
extern "C" {
    pub fn wasm_global_copy(arg1: *const wasm_global_t) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_global_same(arg1: *const wasm_global_t, arg2: *const wasm_global_t) -> bool;
}
extern "C" {
    pub fn wasm_global_get_host_info(arg1: *const wasm_global_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_global_set_host_info(arg1: *mut wasm_global_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_global_set_host_info_with_finalizer(
        arg1: *mut wasm_global_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_global_remap_to_cloned_compartment(
        arg1: *const wasm_global_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_global_name(arg1: *const wasm_global_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_global_as_ref(arg1: *mut wasm_global_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_global(arg1: *mut wasm_ref_t) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_global_as_ref_const(arg1: *const wasm_global_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_global_const(arg1: *const wasm_ref_t) -> *const wasm_global_t;
}
extern "C" {
    pub fn wasm_global_new(
        arg1: *mut wasm_compartment_t,
        arg2: *const wasm_globaltype_t,
        arg3: *const wasm_val_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_global_type(arg1: *const wasm_global_t) -> *mut wasm_globaltype_t;
}
extern "C" {
    pub fn wasm_global_get(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_global_t,
        out: *mut wasm_val_t,
    );
}
extern "C" {
    pub fn wasm_global_set(arg1: *mut wasm_global_t, arg2: *const wasm_val_t);
}
extern "C" {
    pub fn wasm_table_delete(arg1: *mut wasm_table_t);
}
extern "C" {
    pub fn wasm_table_copy(arg1: *const wasm_table_t) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_table_same(arg1: *const wasm_table_t, arg2: *const wasm_table_t) -> bool;
}
extern "C" {
    pub fn wasm_table_get_host_info(arg1: *const wasm_table_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_table_set_host_info(arg1: *mut wasm_table_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_table_set_host_info_with_finalizer(
        arg1: *mut wasm_table_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_table_remap_to_cloned_compartment(
        arg1: *const wasm_table_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_table_name(arg1: *const wasm_table_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_table_as_ref(arg1: *mut wasm_table_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_table(arg1: *mut wasm_ref_t) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_table_as_ref_const(arg1: *const wasm_table_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_table_const(arg1: *const wasm_ref_t) -> *const wasm_table_t;
}
extern "C" {
    pub fn wasm_shared_table_delete(arg1: *mut wasm_shared_table_t);
}
extern "C" {
    pub fn wasm_table_share(arg1: *const wasm_table_t) -> *mut wasm_shared_table_t;
}
extern "C" {
    pub fn wasm_table_obtain(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_shared_table_t,
    ) -> *mut wasm_table_t;
}
pub type wasm_table_size_t = u32;
pub const WASM_TABLE_SIZE_MAX: wasm_table_size_t = 4294967295;
extern "C" {
    pub fn wasm_table_new(
        arg1: *mut wasm_compartment_t,
        arg2: *const wasm_tabletype_t,
        init: *mut wasm_ref_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_table_type(arg1: *const wasm_table_t) -> *mut wasm_tabletype_t;
}
extern "C" {
    pub fn wasm_table_get(table: *const wasm_table_t, index: wasm_table_size_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_table_set(
        table: *mut wasm_table_t,
        index: wasm_table_size_t,
        value: *mut wasm_ref_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_table_size(table: *const wasm_table_t) -> wasm_table_size_t;
}
extern "C" {
    pub fn wasm_table_grow(
        table: *mut wasm_table_t,
        delta: wasm_table_size_t,
        init: *mut wasm_ref_t,
        out_previous_size: *mut wasm_table_size_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_memory_delete(arg1: *mut wasm_memory_t);
}
extern "C" {
    pub fn wasm_memory_copy(arg1: *const wasm_memory_t) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_memory_same(arg1: *const wasm_memory_t, arg2: *const wasm_memory_t) -> bool;
}
extern "C" {
    pub fn wasm_memory_get_host_info(arg1: *const wasm_memory_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_memory_set_host_info(arg1: *mut wasm_memory_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_memory_set_host_info_with_finalizer(
        arg1: *mut wasm_memory_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_memory_remap_to_cloned_compartment(
        arg1: *const wasm_memory_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_memory_name(arg1: *const wasm_memory_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_memory_as_ref(arg1: *mut wasm_memory_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_memory(arg1: *mut wasm_ref_t) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_memory_as_ref_const(arg1: *const wasm_memory_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_memory_const(arg1: *const wasm_ref_t) -> *const wasm_memory_t;
}
extern "C" {
    pub fn wasm_shared_memory_delete(arg1: *mut wasm_shared_memory_t);
}
extern "C" {
    pub fn wasm_memory_share(arg1: *const wasm_memory_t) -> *mut wasm_shared_memory_t;
}
extern "C" {
    pub fn wasm_memory_obtain(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_shared_memory_t,
    ) -> *mut wasm_memory_t;
}
pub type wasm_memory_pages_t = u32;
pub const WASM_MEMORY_PAGES_MAX: wasm_memory_pages_t = 4294967295;
pub const MEMORY_PAGE_SIZE: size_t = 65536;
extern "C" {
    pub fn wasm_memory_new(
        arg1: *mut wasm_compartment_t,
        arg2: *const wasm_memorytype_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_memory_type(arg1: *const wasm_memory_t) -> *mut wasm_memorytype_t;
}
extern "C" {
    pub fn wasm_memory_data(arg1: *mut wasm_memory_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_memory_data_size(arg1: *const wasm_memory_t) -> size_t;
}
extern "C" {
    pub fn wasm_memory_size(arg1: *const wasm_memory_t) -> wasm_memory_pages_t;
}
extern "C" {
    pub fn wasm_memory_grow(
        arg1: *mut wasm_memory_t,
        delta: wasm_memory_pages_t,
        out_previous_size: *mut wasm_memory_pages_t,
    ) -> bool;
}
extern "C" {
    pub fn wasm_extern_delete(arg1: *mut wasm_extern_t);
}
extern "C" {
    pub fn wasm_extern_copy(arg1: *const wasm_extern_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_same(arg1: *const wasm_extern_t, arg2: *const wasm_extern_t) -> bool;
}
extern "C" {
    pub fn wasm_extern_get_host_info(arg1: *const wasm_extern_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_extern_set_host_info(arg1: *mut wasm_extern_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wasm_extern_set_host_info_with_finalizer(
        arg1: *mut wasm_extern_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_extern_remap_to_cloned_compartment(
        arg1: *const wasm_extern_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_name(arg1: *const wasm_extern_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_extern_as_ref(arg1: *mut wasm_extern_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_extern(arg1: *mut wasm_ref_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_as_ref_const(arg1: *const wasm_extern_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_extern_const(arg1: *const wasm_ref_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_kind(arg1: *const wasm_extern_t) -> wasm_externkind_t;
}
extern "C" {
    pub fn wasm_extern_type(arg1: *const wasm_extern_t) -> *mut wasm_externtype_t;
}
extern "C" {
    pub fn wasm_func_as_extern(arg1: *mut wasm_func_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_global_as_extern(arg1: *mut wasm_global_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_table_as_extern(arg1: *mut wasm_table_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_memory_as_extern(arg1: *mut wasm_memory_t) -> *mut wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_as_func(arg1: *mut wasm_extern_t) -> *mut wasm_func_t;
}
extern "C" {
    pub fn wasm_extern_as_global(arg1: *mut wasm_extern_t) -> *mut wasm_global_t;
}
extern "C" {
    pub fn wasm_extern_as_table(arg1: *mut wasm_extern_t) -> *mut wasm_table_t;
}
extern "C" {
    pub fn wasm_extern_as_memory(arg1: *mut wasm_extern_t) -> *mut wasm_memory_t;
}
extern "C" {
    pub fn wasm_func_as_extern_const(arg1: *const wasm_func_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_global_as_extern_const(arg1: *const wasm_global_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_table_as_extern_const(arg1: *const wasm_table_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_memory_as_extern_const(arg1: *const wasm_memory_t) -> *const wasm_extern_t;
}
extern "C" {
    pub fn wasm_extern_as_func_const(arg1: *const wasm_extern_t) -> *const wasm_func_t;
}
extern "C" {
    pub fn wasm_extern_as_global_const(arg1: *const wasm_extern_t) -> *const wasm_global_t;
}
extern "C" {
    pub fn wasm_extern_as_table_const(arg1: *const wasm_extern_t) -> *const wasm_table_t;
}
extern "C" {
    pub fn wasm_extern_as_memory_const(arg1: *const wasm_extern_t) -> *const wasm_memory_t;
}
extern "C" {
    pub fn wasm_instance_delete(arg1: *mut wasm_instance_t);
}
extern "C" {
    pub fn wasm_instance_copy(arg1: *const wasm_instance_t) -> *mut wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_same(arg1: *const wasm_instance_t, arg2: *const wasm_instance_t) -> bool;
}
extern "C" {
    pub fn wasm_instance_get_host_info(arg1: *const wasm_instance_t)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wasm_instance_set_host_info(
        arg1: *mut wasm_instance_t,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wasm_instance_set_host_info_with_finalizer(
        arg1: *mut wasm_instance_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn wasm_instance_remap_to_cloned_compartment(
        arg1: *const wasm_instance_t,
        arg2: *const wasm_compartment_t,
    ) -> *mut wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_name(arg1: *const wasm_instance_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wasm_instance_as_ref(arg1: *mut wasm_instance_t) -> *mut wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_instance(arg1: *mut wasm_ref_t) -> *mut wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_as_ref_const(arg1: *const wasm_instance_t) -> *const wasm_ref_t;
}
extern "C" {
    pub fn wasm_ref_as_instance_const(arg1: *const wasm_ref_t) -> *const wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_new(
        arg1: *mut wasm_store_t,
        arg2: *const wasm_module_t,
        imports: *const *const wasm_extern_t,
        arg3: *mut *mut wasm_trap_t,
        debug_name: *const ::std::os::raw::c_char,
    ) -> *mut wasm_instance_t;
}
extern "C" {
    pub fn wasm_instance_num_exports(arg1: *const wasm_instance_t) -> size_t;
}
extern "C" {
    pub fn wasm_instance_export(arg1: *const wasm_instance_t, index: size_t) -> *mut wasm_extern_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
